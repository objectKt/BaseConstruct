package com.android.launcher.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.android.launcher.entity.Mile;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MILE".
*/
public class MileDao extends AbstractDao<Mile, Long> {

    public static final String TABLENAME = "MILE";

    /**
     * Properties of entity Mile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TotleMile = new Property(1, String.class, "totleMile", false, "TOTLE_MILE");
        public final static Property UserMile = new Property(2, String.class, "UserMile", false, "USER_MILE");
        public final static Property CreateDate = new Property(3, String.class, "createDate", false, "CREATE_DATE");
        public final static Property UserChangeDate = new Property(4, String.class, "userChangeDate", false, "USER_CHANGE_DATE");
        public final static Property CurrentStatus = new Property(5, String.class, "currentStatus", false, "CURRENT_STATUS");
    }


    public MileDao(DaoConfig config) {
        super(config);
    }
    
    public MileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MILE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TOTLE_MILE\" TEXT," + // 1: totleMile
                "\"USER_MILE\" TEXT," + // 2: UserMile
                "\"CREATE_DATE\" TEXT," + // 3: createDate
                "\"USER_CHANGE_DATE\" TEXT," + // 4: userChangeDate
                "\"CURRENT_STATUS\" TEXT);"); // 5: currentStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MILE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Mile entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String totleMile = entity.getTotleMile();
        if (totleMile != null) {
            stmt.bindString(2, totleMile);
        }
 
        String UserMile = entity.getUserMile();
        if (UserMile != null) {
            stmt.bindString(3, UserMile);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(4, createDate);
        }
 
        String userChangeDate = entity.getUserChangeDate();
        if (userChangeDate != null) {
            stmt.bindString(5, userChangeDate);
        }
 
        String currentStatus = entity.getCurrentStatus();
        if (currentStatus != null) {
            stmt.bindString(6, currentStatus);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Mile entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String totleMile = entity.getTotleMile();
        if (totleMile != null) {
            stmt.bindString(2, totleMile);
        }
 
        String UserMile = entity.getUserMile();
        if (UserMile != null) {
            stmt.bindString(3, UserMile);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(4, createDate);
        }
 
        String userChangeDate = entity.getUserChangeDate();
        if (userChangeDate != null) {
            stmt.bindString(5, userChangeDate);
        }
 
        String currentStatus = entity.getCurrentStatus();
        if (currentStatus != null) {
            stmt.bindString(6, currentStatus);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Mile readEntity(Cursor cursor, int offset) {
        Mile entity = new Mile( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // totleMile
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // UserMile
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // createDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userChangeDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // currentStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Mile entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTotleMile(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserMile(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserChangeDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCurrentStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Mile entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Mile entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Mile entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
