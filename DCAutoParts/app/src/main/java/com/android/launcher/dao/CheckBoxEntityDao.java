package com.android.launcher.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.android.launcher.entity.CheckBoxEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHECK_BOX_ENTITY".
*/
public class CheckBoxEntityDao extends AbstractDao<CheckBoxEntity, Long> {

    public static final String TABLENAME = "CHECK_BOX_ENTITY";

    /**
     * Properties of entity CheckBoxEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Selected = new Property(1, String.class, "selected", false, "SELECTED");
        public final static Property CheckBoxName = new Property(2, String.class, "checkBoxName", false, "CHECK_BOX_NAME");
    }


    public CheckBoxEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CheckBoxEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHECK_BOX_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SELECTED\" TEXT," + // 1: selected
                "\"CHECK_BOX_NAME\" TEXT);"); // 2: checkBoxName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHECK_BOX_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CheckBoxEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String selected = entity.getSelected();
        if (selected != null) {
            stmt.bindString(2, selected);
        }
 
        String checkBoxName = entity.getCheckBoxName();
        if (checkBoxName != null) {
            stmt.bindString(3, checkBoxName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CheckBoxEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String selected = entity.getSelected();
        if (selected != null) {
            stmt.bindString(2, selected);
        }
 
        String checkBoxName = entity.getCheckBoxName();
        if (checkBoxName != null) {
            stmt.bindString(3, checkBoxName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CheckBoxEntity readEntity(Cursor cursor, int offset) {
        CheckBoxEntity entity = new CheckBoxEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // selected
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // checkBoxName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CheckBoxEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSelected(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCheckBoxName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CheckBoxEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CheckBoxEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CheckBoxEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
